#!/bin/sh

# Run the mgsltest program in master mode on an HDLC port.
#
# The testslave script should be run on another HDLC port
# to echo the frames received from the master port back 
# to the master port.
#
# The master and slave ports should be connected by a
# NULL modem. The NULL modem should connect the master
# (clock source) AUXCLK pin to the TxC/RxC pins of both
# master and slave ports.


# The first command line argument may be the master port device name.
# Default is "/dev/ttySL0" (1st Route56 Adapter)

if ( [ ! -z $1 ] ) then
	DEVICE=$1
else
	DEVICE=/dev/ttySL0
fi


#
# verify presense of necessary utility programs to run test
#
PATH="/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:../scripts"

######################################################
#
# Check for device drivers loaded and nodes made
#
( lsmod | grep -i "route56"    >/dev/null) || { 
    echo "ERROR:  Route56 driver is not loaded,"
    echo "         please exectue r56load"
    exit 1 
}

( lsmod | grep -i "n_hdlc"     >/dev/null) || { 
    echo "ERROR:  N_HDLC driver is not loaded,"
    echo "         please execute r56load"
    exit 1
}

[ -c $DEVICE ] || {
    echo "ERROR:  Device node($DEVICE) doesn't exist!"
    echo "         please execute r56load"
    exit 1
}


# if SPEED is non-zero, then clocks are generated on the master
# port AUXCLK pin at the specified speed in bits per second
SPEED=115200

# size in bytes of each test frame
SIZE=1024

# number of test frames to send
COUNT=5

# Set master port configuration.
#
# * hdlc option sets bit-synchronous HDLC mode
# * nrz selects NRZ encoding
# * clock $SPEED generates clocks on AUXCLK signal (if SPEED is non-zero)
# * -loopback disables internal loopback mode
# * txc takes transmit clock from the TxC pin
# * rxc takes receive clock from the RxC pin

r56util $DEVICE hdlc nrz clock $SPEED -loopback txbrg rxbrg

# start the mgsltest program in master mode
r56test $DEVICE size $SIZE count $COUNT

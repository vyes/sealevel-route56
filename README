                 ***********************************
                 *** Route56 Adapters for Linux ***
                 ***********************************

Contents
--------
Overview
PPP Networking
Cisco HDLC Networking
Custom Applications
Software Map
Building the Drivers
Building the Utilities and Samples
Loading and Unloading Drivers
HDLC Line Discipline
r56util Configuration Utility
r56test Diagnostic Utility
Customer And Technical Support

More information is available in the following files:

API                   How to write custom serial programs.


****************
*** Overview ***
****************

Route56 is a family of multiprotocol serial adapters for computers
with PCI, ISA, and PCMCIA expansion slots.

Route56
-------------------------
* synchronous speeds up to 10Mbps
* bit synchronous HDLC
* bit synchronous raw (no framing/synchronization)
* asynchronous (max speed 921600bps)
* software selectable RS-232, RS-422, RS-485, V.35, RS-422(RS-530/RS-530A)

Software support for Linux includes networking and custom serial applications.
The supporting software is intended to be independant of a particular Linux
distribution, but may require some modification for specific distributions.


***************************
*** Custom Applications ***
***************************

User applications can completel control the adapter to implement
any serial communications such as SNA, X.25, instrument monitoring
and control, or other custom applications. Standard unix system calls
and the tty/termios programming interface offers a familiar and
documented method for application contol.

For more details, refer to the API document in this package.


********************
*** Software Map ***
********************

* Device Drivers
    - route56.c          Route56 Multiprotocol Synchronous Serial Driver
    - route56.h          common header file for all drivers and applications
* configuration utility (r56util.c)
* diagnostics utility (r56test.c)
* sample applications
    - sample-hdlc        bit synchronous HDLC application
    - sample-raw         bit synchronous raw application
    - sample-async       asynchronous application
    - sample-loopmode    an HDLC/SDLC loopmode sample application
* sample shell scripts
    - r56load            load the device driver and line discipline
    - r56unload          unload the device driver and line discipline
    - testmaster         perform external loopback or back to back test
    - testslave          echo received frames for back to back test
    - testloop           perform internal loopback test

All Route56 software includes source code released under the GNU General
Public License (GPL).


****************************
*** Building the Drivers ***
****************************

Building the drivers requires the Linux kernel source.
The kernel source may be provided with your Linux distribution
or can be obtained from ftp.kernel.org.

Driver source is located in the driver subdirectory of this package.

Kernel Versions
---------------

Drivers in this package work with the latest generic kernel source version
(ftp.kernel.org) for a kernel source branch (2.4.X, 2.6.X, etc).
These drivers may not be compatible with the kernel source included with
some distributions or with earlier generic kernel versions.


Building Drivers in this Package
--------------------------------

This driver package assumes the kernel source is located in
the directory /usr/src/linux. You may place the kernel source in
that directory, create a symbolic link from the actual source
directory to /usr/src/linux, pass the KDIR variable to the Makefile
(`make KDIR=/linux`), or modify the Makefiles and scripts in 
this package to use a different directory.

The kernel source must have an existing configuration, located
in the file /usr/src/linux/.config and must have build dependencies
located in files named .depend located throughout the kernel source.
If the configuration file is missing, a configuration can be
generated using the 'make menuconfig' command in the kernel
source directory. The dependency files are created, after generating
a configuration file, using the 'make dep' command in the kernel
source directory (ONLY NECESSARY ON 2.4 SERIES KERNELS). Refer to 
the kernel documentation for more details.

In the Route56 distribution directory use the following commands:

# make

*Build everything in the package.

*Build drivers for use with kernel located in /usr/src/linux directory.

*Built drivers are located in the driver subdirectory.

*Build example applications and configuration utilities.

*All examples are in the examples subdirectory.

# make install

*Copy built drivers to lib/modules/x.y.z directory and
run depmod to calculate module dependencies.

*Configuration utilities and load/unload scripts are copied to the
directory specified by the APPSDIR variable (default /usr/bin).

*Application header file is installed to the directory specified by 
the INCLUDEDIR variable (default /usr/local/include).

*Example applications and scripts are NOT copied to the system, but 
remain in the package distribution.

*After installation, the drivers are ready for use.


**************************************
*** Building Utilities and Samples ***
**************************************

The utility and sample programs are built in the Route56
distribution directory by typing the command:

   #make

The package builds the drivers and utilities at the same time.
See previous section.


****************************************
*** Loading and Unloading the Driver ***
****************************************

The driver driver is built as a module and must be loaded before use.
The sample scripts r56load and r56unload demonstrate the steps necessary
to load and unload the drivers as described below.

The r56load script file can take optional command line arguments:
    prefix		device name prefix (optional)
                        default=ttySL
    adapters	number of adapters (optional)
			default=4
    group		group owner for device nodes (optional)
			default=root
    mode		access permissions for device nodes (optional)
			default=666 (rw for all)


The r56unload script removes inactive route56 drivers.

The device driver is loaded and unloaded using the standard module
utilities modprobe (load module and dependent modules), insmod (insert
module) and rmmod (remove module). Refer to the man pages for these
utilities for more information.

   insmod options for hardware device drivers (rarely used):

   maxframe=N[,N...]       maximum frame size in bytes (default 4096)
                           0=use default
                           Specify same maximum frame size for n_hdlc.o

   debug_level=N           specify debug output level (to syslog)
                           0=disabled, 1-5 increasing detail level

   ttymajor=N              force tty driver major device number to N

   txdmabufs=N[,N...]      number of transmit DMA buffers
                           used only in raw and byte synchronous mode
                           increasing transmit dma buffers decreases
                           reduces available receive dma buffers

   txholdbufs=N[,N...]     number of transmit buffers (1 to 5)
                           Used only in raw and byte synchronous modes.

   Note: N[,N...] indicates options that may be repeated for each device instance
         For example: maxframe=4096,9182 assigned 4096 to the first device instance
         and 8192 to the second device instance.

* Device major and minor numbers

   Linux internally identifies devices by the device major and minor
   numbers. The major number identifies a driver. The minor number identifies
   a device instance. By default, the Route56 major number is dynamically assigned
   when the driver is loaded. The ttymajor option forces a specific device
   major number when loading the Route56 driver. Route56 device minor
   numbers start at 64.

   After loading the Route56 driver, the device major number can be
   determined with the command: cat /proc/devices. The Route56 devices
   will be listed under the 'Character devices' section as ttySL.

   A device name, such as /dev/ttySL0, is
   mapped to a device major and minor numbers using the program 'mknod'.
   Because the Route56 driver dynamically allocates
   the device major number, these links must be updated every time the
   driver is loaded. This can be done with the 'r56load' shell
   script. This script queries the system for the device numbers and calls
   mknod to create the device files.

   Alternatively mknod can be used to create the device files once, and
   the ttymajor option can be used with insmod to force the use of a
   particular device major number. Care must be taken to avoid a conflict
   with an existing major device number or the Route56 driver will fail to load.

* Unloading the device driver

   When no applications are using the Route56 device driver, the driver
   may be unloaded with the following command:

      rmmod route56

   If the driver is still in use when rmmod is executed, then a message is
   displayed indicating that the device is busy, and the driver remains
   loaded.

* Interrupt Sharing

   The Route56 PCI adapters can share interrupts with other devices. The
   Route56 device driver has been tested in a shared interrupt
   configuration. Drivers for some devices may not be 'well behaved' and
   may cause problems when sharing interrupts. If you encounter problems
   when sharing interrupts, try changing BIOS settings to assign a
   seperate interrupt to the Route56 adapter. If the BIOS does not
   support interrupt assignment, test the Route56 adapter with other
   devices removed or disabled.


****************************
*** HDLC Line Discipline ***
****************************

source file : n_hdlc.c
binary file : n_hdlc.o

The HDLC line discipline is a driver that provides a frame oriented
personality for tty drivers.  This driver is not included in this package, but
is copied directly from your kernel source in /usr/src/linux/drivers/char.
The driver is copied from this location because there are slight changes in
this driver that can cause kernel incompatibility across different kernel
series.  If your distribution moves the location of this driver, you may need
to copy it by hand.

* Each write() call is one frame/block of data.
  The entire frame is accepted or refused (busy).

* Each read() call returns a frame/block of data.

* Data is not altered by the line discipline,
  regardless of the termios settings

When line discipline is queried for the amount of receive data available,
0 is returned if no data available, otherwise the count of the next
available frame is returned (instead of the sum of all received frame
counts).

The HDLC line discipline is used only for custom synchronous applications
and is NOT used with PPP networking.

The HDLC line discipline driver is loaded and unloaded using the insmod
and rmmod utilities as described in the device driver section above.

insmod options for n_hdlc (rarely used):

   debug_level=N           specify the debug output level for the driver.
                           0=disabled, 1=enabled

   maxframe=dddd           maximum frame size in bytes (default=4096)
                           This must match the max frame size specified
                           for the Route56 hardware driver.


**************************************
*** r56util Configuration Utility ***
**************************************

source : r56util.c
binary : r56util

This utility allows the user to set the serial options,
and can be called from shell scripts.

Run without command line arguments to display usage information.

The r56util.c source file demonstrates how to
programmatically control these parameters for custom applications.


************************************
*** r56test Diagnostics Utility ***
************************************

source : r56test.c
binary : r56test

This utility allows the user to verify the correct operation of the adapter,
by loading the device drivers and sending and receiving data.

Run without command line arguments to display usage information.

This program can be called from a script for convenience.

Sample scripts are provided in this package to perform common tests:

testloop     loopback frames internally or externally (using external loopback device)
testmaster   send data to remove slave, wait for data to be echoed back by slave
testslave    wait for received data and echo data back to sender


**************************************
*** Customer And Technical Support ***
**************************************

For support relating to the Sealevel products, contact Sealevel at
(864)843-4343 M-F during normal business hours.


******************************
*** Internet/Email Support ***
******************************

Sealevel support personnel may be reached via the Internet by writing
support@sealevel.com.  Also visit the Sealevel web site (www.sealevel.com)
for information.


*******************************
*** Trademark And Copyright ***
*******************************

Sealevel and Route56 are registered trademarks of Sealevel Systems Incorporated.
All other trademarks and registered trademarks belong to respective owners.


***********************
*** Warnings/Errata ***
***********************


**********************************
*** Using RedHat Kernel Source ***
**********************************

The kernel source installed with a RedHat distribution
requires preparation before being used to build the
Route56 drivers. In the following steps, the term
'target kernel' refers to the kernel that will be
used with the drivers.

1. Change to the directory containing the kernel source.

2. Type the command 'make mrproper'

3. Copy the appropriate config file in the configs subdirectory
   to a file named '.config' in the base kernel source directory.
   The source configuration file should match that of
   the target kernel.

4. Edit the Makefile in the base kernel source directory.
   Change the EXTRAVERSION value at the top of the file
   to match the EXTRAVERSION of the target kernel.
   If the EXTRAVERSION does not match the target kernel, then
   drivers built based on the incorrect EXTRAVERSION will not load.

5. Type the command 'make menuconfig'
   After the kernel configuration starts, select 'Exit' and
   reply 'Yes' when asked to save the configuration.
   This step creates necessary files based on the .config file.

6. Type the command 'make dep' (only for kernel versions 2.4 and earlier)

The preparation necessary for using the RedHat supplied
kernel source may change without notice. This is beyond
the control of Sealevel Systems. If the steps listed
above do not work, consult the RedHat documentation and
support facilities for information on how to compile
and use RedHat supplied kernel source.




